# Generated by Django 4.2.7 on 2025-10-06 02:44

from django.conf import settings
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('companies', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='IntegrationConnection',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('connection_name', models.CharField(help_text='User-defined name for this connection', max_length=200)),
                ('status', models.CharField(choices=[('pending', 'Pending Setup'), ('active', 'Active'), ('expired', 'Token Expired'), ('error', 'Error'), ('disconnected', 'Disconnected')], default='pending', max_length=20)),
                ('encrypted_credentials', models.TextField(help_text='Encrypted OAuth tokens or API keys')),
                ('access_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('refresh_token_expires_at', models.DateTimeField(blank=True, null=True)),
                ('auto_sync_enabled', models.BooleanField(default=True)),
                ('sync_frequency_minutes', models.IntegerField(default=60, help_text='How often to sync data (in minutes)')),
                ('last_sync_at', models.DateTimeField(blank=True, null=True)),
                ('next_sync_at', models.DateTimeField(blank=True, null=True)),
                ('data_mappings', models.JSONField(blank=True, default=dict, help_text='Map external fields to our schema')),
                ('sync_filters', models.JSONField(blank=True, default=dict, help_text='Filters for what data to sync')),
                ('external_account_id', models.CharField(blank=True, max_length=200)),
                ('external_account_name', models.CharField(blank=True, max_length=200)),
                ('error_message', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('company', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to='companies.company')),
            ],
            options={
                'verbose_name': 'Integration Connection',
                'verbose_name_plural': 'Integration Connections',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationProvider',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True)),
                ('display_name', models.CharField(max_length=100)),
                ('category', models.CharField(choices=[('accounting', 'Accounting'), ('cloud', 'Cloud Provider'), ('crm', 'CRM'), ('erp', 'ERP'), ('communication', 'Communication'), ('data', 'Data Platform'), ('iot', 'IoT/Energy')], max_length=20)),
                ('description', models.TextField()),
                ('logo_url', models.URLField(blank=True)),
                ('website_url', models.URLField(validators=[django.core.validators.URLValidator()])),
                ('auth_method', models.CharField(choices=[('oauth2', 'OAuth 2.0'), ('api_key', 'API Key'), ('basic', 'Basic Auth'), ('custom', 'Custom')], default='oauth2', max_length=20)),
                ('oauth_authorize_url', models.URLField(blank=True)),
                ('oauth_token_url', models.URLField(blank=True)),
                ('oauth_scopes', models.JSONField(blank=True, default=list)),
                ('api_base_url', models.URLField(blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_beta', models.BooleanField(default=False)),
                ('supports_webhooks', models.BooleanField(default=False)),
                ('supports_real_time_sync', models.BooleanField(default=False)),
                ('documentation_url', models.URLField(blank=True)),
                ('setup_instructions', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name': 'Integration Provider',
                'verbose_name_plural': 'Integration Providers',
                'ordering': ['display_name'],
            },
        ),
        migrations.CreateModel(
            name='WebhookEndpoint',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('event_type', models.CharField(help_text='Type of events this webhook handles', max_length=100)),
                ('external_webhook_id', models.CharField(blank=True, max_length=200)),
                ('webhook_secret', models.CharField(help_text='Secret for verifying webhook signatures', max_length=200)),
                ('is_active', models.BooleanField(default=True)),
                ('last_received_at', models.DateTimeField(blank=True, null=True)),
                ('total_events_received', models.IntegerField(default=0)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhooks', to='integrations.integrationconnection')),
            ],
            options={
                'verbose_name': 'Webhook Endpoint',
                'verbose_name_plural': 'Webhook Endpoints',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='IntegrationSyncLog',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('status', models.CharField(choices=[('started', 'Started'), ('in_progress', 'In Progress'), ('completed', 'Completed'), ('failed', 'Failed'), ('partial', 'Partially Completed')], default='started', max_length=20)),
                ('sync_type', models.CharField(default='scheduled', help_text='manual, scheduled, webhook', max_length=50)),
                ('records_fetched', models.IntegerField(default=0)),
                ('records_processed', models.IntegerField(default=0)),
                ('records_created', models.IntegerField(default=0)),
                ('records_updated', models.IntegerField(default=0)),
                ('records_failed', models.IntegerField(default=0)),
                ('started_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('completed_at', models.DateTimeField(blank=True, null=True)),
                ('duration_seconds', models.FloatField(blank=True, null=True)),
                ('error_message', models.TextField(blank=True)),
                ('error_details', models.JSONField(blank=True, default=dict)),
                ('sync_metadata', models.JSONField(blank=True, default=dict, help_text='Additional sync information')),
                ('connection', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sync_logs', to='integrations.integrationconnection')),
            ],
            options={
                'verbose_name': 'Integration Sync Log',
                'verbose_name_plural': 'Integration Sync Logs',
                'ordering': ['-started_at'],
            },
        ),
        migrations.AddField(
            model_name='integrationconnection',
            name='provider',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='connections', to='integrations.integrationprovider'),
        ),
        migrations.AddField(
            model_name='integrationconnection',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='integrations', to=settings.AUTH_USER_MODEL),
        ),
        migrations.CreateModel(
            name='IntegrationDataMapping',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('data_type', models.CharField(choices=[('carbon_emission', 'Carbon Emission'), ('financial_transaction', 'Financial Transaction'), ('energy_usage', 'Energy Usage'), ('waste_data', 'Waste Data'), ('employee_data', 'Employee Data'), ('supplier_data', 'Supplier Data')], max_length=50)),
                ('external_endpoint', models.CharField(help_text='API endpoint to fetch this data', max_length=200)),
                ('external_object_type', models.CharField(help_text='External object/resource type', max_length=100)),
                ('field_mappings', models.JSONField(default=dict, help_text='Map external fields to our schema')),
                ('transformation_rules', models.JSONField(blank=True, default=dict, help_text='Data transformation logic')),
                ('is_default', models.BooleanField(default=True)),
                ('is_active', models.BooleanField(default=True)),
                ('notes', models.TextField(blank=True)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='data_mappings', to='integrations.integrationprovider')),
            ],
            options={
                'verbose_name': 'Integration Data Mapping',
                'verbose_name_plural': 'Integration Data Mappings',
                'ordering': ['provider', 'data_type'],
                'unique_together': {('provider', 'data_type', 'external_object_type')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='integrationconnection',
            unique_together={('user', 'provider', 'external_account_id')},
        ),
    ]
